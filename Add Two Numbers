Problem Statement:
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.



class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *head = NULL;
        ListNode *temp;
        int carry=0;
        while(l1 != NULL || l2!= NULL){
            int num1,num2;
            if(l1 == NULL)
                num1 = 0;
            else
            num1 = l1->val;

            if(l2 == NULL)
                num2 = 0;
             else
                num2 = l2->val;

            int sum = num1 + num2 + carry;
            if(head == NULL){
                head=  new ListNode(sum%10);
                temp = head;
                carry = sum/10;
            }
            else{
                temp->next = new ListNode(sum%10);
                temp = temp->next;
                carry = sum/10;
            }
            if(l1 != NULL)
                l1 = l1->next;
             if(l2 != NULL)
                l2 = l2->next;
        }
        if(carry != 0){
            temp->next= new ListNode(carry);
        }
    return head;  
    }
};
