Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”


class Solution {
public:
   void getAncestor(TreeNode* root, TreeNode* node,vector<TreeNode*> &v){
       if(root->val == node->val){
           v.push_back(root);
       }
       if(root->val != node->val){
           if(node->val < root->val)
               getAncestor(root->left,node,v);
       else
               getAncestor(root->right,node,v);
           v.push_back(root);
       }
   }
   TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*>a1,a2;
        getAncestor(root,p,a1);
        getAncestor(root,q,a2);
        reverse(a1.begin(), a1.end());
        reverse(a2.begin(), a2.end());
        TreeNode* lca = NULL;
        for (auto i = 0; i < min(a1.size(), a2.size()); ++i) {
            if (a1[i] == a2[i])
                lca = a1[i];
            else
                break;
        }
        return lca;
   }
};
