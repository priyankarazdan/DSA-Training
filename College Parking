Problem Statement:
A parking lot in a college has RxC number of parking spaces. Each parking space will either be empty(0) or full(1). The status (0/1) of a parking space is represented as the element of the matrix. The task is to find number of the row(R) in the parking lot that has the most of the parking spaces full(1).


#include <iostream>
using namespace std;

int main() {
    int R, C;
    cin >> R >> C;
   
    int parkingLot[R][C];
   
    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            cin >> parkingLot[i][j];
        }
    }

    int maxFullSpaces = 0;
    int rowWithMaxFullSpaces = 0;

    for (int i = 0; i < R; i++) {
        int fullSpaces = 0;
        for (int j = 0; j < C; j++) {
            if (parkingLot[i][j] == 1) {
                fullSpaces++;
            }
        }
        if (fullSpaces > maxFullSpaces) {
            maxFullSpaces = fullSpaces;
            rowWithMaxFullSpaces = i + 1;
        }
    }

    cout << rowWithMaxFullSpaces << endl;

    return 0;
}
